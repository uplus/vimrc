## -----------------------------
## view
## -----------------------------

[[plugins]]
repo = 'Shougo/vinarise.vim'
on_cmd = 'Vinarise'
hook_add = '''
  let g:vinarise_enable_auto_detect = 1
'''

# [[plugins]]
# repo = 'kannokanno/previm'
# depends = ['open-browser.vim']
# on_ft = 'markdown'
# hook_add = '''
#   " " 設定されてると非同期にならない
#   " if executable('firefox')
#   "   let g:previm_open_cmd='firefox'
#   " endif
# '''

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
hook_post_update = 'call mkdp#util#install()'
on_cmd = ['MarkdownPreview', 'MarkdownPreviewStop']
on_func = ['mkdp#util#install']
hook_add = '''
  " let g:mkdp_browser = 'xdg-open'
  let g:mkdp_auto_start = 0
  let g:mkdp_command_for_global = 0
  let g:mkdp_open_to_the_world = 0
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
if = "v:false"
on_cmd = ['IndentLinesToggle', 'LeadingSpaceToggle']
hook_add = '''
  let g:indentLine_enabled              = 0
  let g:indentLine_faster               = 1
  let g:indentLine_showFirstIndentLevel = 1
  let g:indentLine_color_term           = 208
  nmap <silent>\tl :IndentLinesToggle<CR>
'''

[[plugins]]
repo = 'kevinhwang91/nvim-bqf'
# TODO: nvim_win_closeで削除されたwindowでvim.scheduleが発動してエラーになるから抑制
if = 'v:false'
on_ft = ['qf']
hook_post_source = '''
lua << EOF
  require('bqf.config').setup({
    auto_enable = true,
    magic_window = true,
    auto_resize_height = false,
    preview = {
        auto_preview = true,
        delay_syntax = 80,
        win_height = 10,
        win_vheight = 10,
        wrap = false,
    },
  })
EOF
'''

## -----------------------------
## colors
## -----------------------------

[[plugins]]
repo = 't9md/vim-quickhl'
on_map = ['<Plug>(quickhl', '<Plug>(operator-quickhl']
hook_add = '''
  let g:quickhl_manual_enable_at_startup = 1
  let g:quickhl_cword_enable_at_startup  = 0
  let g:quickhl_tag_enable_at_startup    = 0
  let g:quickhl_manual_keywords          = [] " Can use List and Dictionary

  nmap gh <Plug>(quickhl-manual-this)
  xmap gh <Plug>(quickhl-manual-this)
  nmap gH <Plug>(quickhl-manual-this-whole-word)
  nmap gl <Plug>(operator-quickhl-manual-this-motion)<Plug>(textobj-line-i)
  nmap gm <Plug>(operator-quickhl-manual-this-motion)

  " nmap \toh <Plug>(quickhl-cword-toggle)

  let g:quickhl_manual_hl_priority = 100

  " red purple slate blue blue green yellow orange
  let g:quickhl_manual_colors = [
        \ 'term=reverse ctermfg=232 ctermbg=160  guifg=#080808 guibg=#d70000',
        \ 'term=reverse ctermfg=232 ctermbg=128  guifg=#080808 guibg=#af00d7',
        \ 'term=reverse ctermfg=232 ctermbg=63   guifg=#080808 guibg=#5f5fff',
        \ 'term=reverse ctermfg=232 ctermbg=33   guifg=#080808 guibg=#0087ff',
        \ 'term=reverse ctermfg=232 ctermbg=34   guifg=#080808 guibg=#00af00',
        \ 'term=reverse ctermfg=232 ctermbg=226  guifg=#080808 guibg=#ffff00',
        \ 'term=reverse ctermfg=232 ctermbg=202  guifg=#080808 guibg=#ff5f00',
        \ 'term=reverse ctermfg=0   ctermbg=207  guifg=#080808 guibg=#ff5fff',
        \ 'term=reverse ctermfg=0   ctermbg=201  guifg=#080808 guibg=#ff00ff',
        \ 'term=reverse ctermfg=0   ctermbg=117  guifg=#080808 guibg=#87d7ff',
        \ 'term=reverse ctermfg=0   ctermbg=75   guifg=#080808 guibg=#5fafff',
        \ 'term=reverse ctermfg=0   ctermbg=43   guifg=#080808 guibg=#00d7af',
        \ 'term=reverse ctermfg=0   ctermbg=190  guifg=#080808 guibg=#d7ff00',
        \ 'term=reverse ctermfg=0   ctermbg=69   guifg=#080808 guibg=#5f87ff',
        \ 'term=reverse ctermfg=0   ctermbg=85   guifg=#080808 guibg=#5fffaf',
        \ 'term=reverse ctermfg=0   ctermbg=183  guifg=#080808 guibg=#d7afff',
        \ ]
'''

[[plugins]] # color highlight
repo = 'RRethy/vim-hexokinase'
on_cmd = ['HexokinaseToggle', 'HexokinaseRefresh']
build = 'make hexokinase'

[[plugins]]
repo = 'cocopon/colorswatch.vim'
on_cmd = 'ColorSwatchGenerate'

[[plugins]] # color picker
repo = 'uplus/colorsel.vim'
on_cmd = 'ColorSel'

[[plugins]]
repo = 'wadackel/nvim-syntax-info'
on_cmd = ['SyntaxInfoEnable', 'SyntaxInfoToggle']

## -----------------------------
## action
## -----------------------------

[[plugins]]
# repo = 'tyru/caw.vim'
repo = 'uplus/caw.vim'
# rev = 'fix-has_syntax-for-highlight-link'
rev = 'fix-comment-detection-on-treesitter'
depends = ['vim-operator-user'] # 'context_filetype.vim'
on_map = '<Plug>(caw'
hook_add = '''
  let g:caw_no_default_keymappings = 1
  let g:caw_operator_keymappings = 0
  " let g:caw_dollarpos_sp_left = ' '
  " let g:caw_dollarpos_startinsert = 1

  " basic mappings, 回数指定は gc2j など
  nmap gc <Plug>(caw:hatpos:toggle:operator)
  nmap gcc <Plug>(caw:hatpos:toggle)
  nmap g<space> gcc
  xmap g<space> gc

  nmap gcj <Plug>(caw:hatpos:toggle)j<PLug>(caw:hatpos:toggle)k
  nmap gck <Plug>(caw:hatpos:toggle)k<PLug>(caw:hatpos:toggle)j
  " append tail comment, Aじゃないとobjectのaと被る
  nmap gcA <Plug>(caw:dollarpos:toggle)

  " yank and comment out
  xmap <Plug>(comment-toggle-yank) ygv<Plug>(caw:hatpos:toggle)
  xmap gy <Plug>(comment-toggle-yank)
  xmap gc <Plug>(caw:hatpos:toggle)
  nmap gyy yy<Plug>(caw:hatpos:toggle)
  nmap <expr>gy operator#exec_command#mapexpr_v_keymapping("\<Plug>(comment-toggle-yank)")

  " paste and comment out
  nmap gcp p<Plug>(select-pasted)gc
'''

[[plugins]]
repo = 'chrisbra/unicode.vim'
on_cmd = ['Digraphs', 'SearchUnicode', 'UnicodeName', 'UnicodeTable', 'DownloadUnicode']
on_map = [['i', '<Plug>(DigraphComplete)', '<Plug>(UnicodeComplete)', '<Plug>(UnicodeGA)', '<Plug>(MakeDigraph)', '<Plug>(UnicodeSwapCompleteName)']]
hook_add = '''
  imap <c-x><c-g> <Plug>(DigraphComplete)
  imap <c-x><c-z> <Plug>(UnicodeComplete)
'''

[[plugins]] # contain textobj
repo = 'AndrewRadev/sideways.vim'
on_map = ['<Plug>Sideways']
on_cmd = ['SidewaysLeft', 'SidewaysRight', 'SidewaysJumpLeft', 'SidewaysJumpRight']
hook_add = '''
  nmap <space>l <Plug>SidewaysRight
  nmap <space>h <Plug>SidewaysLeft
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'
on_cmd = 'Linediff'
hook_add = '''
  let g:linediff_buffer_type = 'scratch'
  " let g:linediff_first_buffer_command  = 'new'
  " let g:linediff_further_buffer_command = 'vertical new'
  " let g:linediff_indent = 1

  nnoremap <silent>gsd  :Linediff<cr>
  xnoremap <silent>gsd  :Linediff<cr>
  au myac User LinediffBufferReady nnoremap <silent><buffer>q :quit<cr>
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = ['<Plug>(EasyAlign)', '<Plug>(LiveEasyAlign)']
on_cmd = ['EasyAlign', 'LiveEasyAlign']
hook_add = '''
  nmap sl <Plug>(EasyAlign)
  vmap sl <Plug>(EasyAlign)
  nmap sL <Plug>(LiveEasyAlign)
  vmap sL <Plug>(LiveEasyAlign)
'''
hook_source = 'source ~/.vim/rc/easyalign.rc.vim'

[[plugins]]
repo = 'uplus/vim-clurin'
on_map = ['<Plug>(clurin-next)', '<Plug>(clurin-prev)']
hook_source = 'source ~/.vim/rc/clurin.rc.vim'
# mapping in submode.rc.vim
hook_add = '''
  nmap <silent><Plug>(clurin-undojoin) <Plug>(u10-undojoin)<Plug>(clurin-next)
'''

[[plugins]]
repo = 'kana/vim-niceblock'
on_map = ['<Plug>(niceblock-I)', '<Plug>(niceblock-gI)', '<Plug>(niceblock-A)']
hook_add = '''
  xmap I  <Plug>(niceblock-I)
  xmap A  <Plug>(niceblock-A)
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = '<Plug>(jplus'
hook_add = '''
  nmap J <Plug>(jplus)
  xmap J <Plug>(jplus)

  " 任意の1文字+両端に空白を挿入して結合を行う
  nmap gJ <Plug>(jplus-getchar)
  xmap gJ <Plug>(jplus-getchar)

  " 複数文字を入力したい場合
  nmap <Space>gJ <Plug>(jplus-input)
  vmap <Space>gJ <Plug>(jplus-input)

  " ,での結合にスペースを挿入
  let g:jplus#input_config = {
    \ ',' : {'delimiter_format' : '%d '}
    \}

  " let g:jplus#config = {
  "  \ 'dockerfile': {
  "  \   'left_matchstr_pattern': '.*\ze\s\+\\\s*$',
  "  \ },
  "  \ }
  " ^\s*\\\s*\zs.*\|\s*\zs.*
'''

[[plugins]]
repo = 'AckslD/nvim-trevJ.lua'
on_lua = 'trevj'
hook_add = '''
  command! Rjoin lua require('trevj').format_at_cursor()
'''
hook_post_source = '''
lua << EOF
  require('trevj').setup()
EOF
'''

[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = ['<Plug>(expand_region_expand)', '<Plug>(expand_region_shrink)']
hook_add = '''
  xmap v <Plug>(expand_region_expand)
  xmap gm <Plug>(expand_region_shrink)
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_map = ['<Plug>(table-mode', '\tm', '\tt']
on_cmd = ['TableModeToggle', 'Tableize']
hook_add = '''
  let g:table_mode_map_prefix = '\t'
  let g:table_mode_corner = '|'
  xmap \tT <Plug>(table-mode-tableize-delimiter)
  " let g:table_mode_disable_mappings = 1

  let g:table_mode_motion_up_map = ''
  let g:table_mode_motion_down_map = ''
  let g:table_mode_motion_left_map = ''
  let g:table_mode_motion_right_map = ''
'''

[[plugins]]
repo = 'monaqa/dial.nvim'
on_map = ['<Plug>(dial-increment)', '<Plug>(dial-decrement)']
hook_add = '''
  nmap  <c-a>  <Plug>(dial-increment)
  nmap  <c-x>  <Plug>(dial-decrement)
  vmap  <c-a>  <Plug>(dial-increment)
  vmap  <c-x>  <Plug>(dial-decrement)
  " vmap g<c-a> g<Plug>(dial-increment)
  " vmap g<c-x> g<Plug>(dial-decrement)
'''
hook_post_source = '''
lua << EOF
local augend = require("dial.augend")
require("dial.config").augends:register_group{
  default = {
    augend.integer.alias.decimal,
    augend.integer.alias.hex,
    augend.date.new {
      pattern = "%Y/%m/%d",
      default_kind = "day",
    },
    augend.date.new {
      pattern = "%Y-%m-%d",
      default_kind = "day",
    },
    augend.date.new {
      pattern = "%m/%d",
      default_kind = "day",
      only_valid = true,
    },
    augend.date.new {
      pattern = "%H:%M",
      default_kind = "day",
      only_valid = true,
    },
    augend.semver.alias.semver,
    augend.constant.alias.ja_weekday_full,
  },
}
EOF
'''

[[plugins]]
repo = 'rgroli/other.nvim'
on_cmd = ['Other']
hook_post_source = '''
lua << EOF
  require("other-nvim").setup({
      mappings = {
          -- builtin mappings
          "livewire",
          "angular",
          "laravel",
          -- custom mapping
          -- {
          --     pattern = "/path/to/file/src/app/(.*)/.*.ext$",
          --     target = "/path/to/file/src/view/%1/",
          --     transformer = "lowercase"
          -- }
      },
      transformers = {
          -- defining a custom transformer
          lowercase = function (inputString)
              return inputString:lower()
          end
      }
  })
EOF
'''

## -----------------------------
## search and replace
## -----------------------------

[[plugins]]
repo = 'thinca/vim-partedit'
on_cmd = 'Partedit'
hook_add = '''
  vmap <silent>,, :Partedit<cr>
  " 上手く動かない
  " smap <silent>,s :Partedit<cr>:call feedkeys('ss')<cr>
  let g:partedit#opener = 'botright new'
  let g:partedit#filetype = 'narrow'
  let g:partedit#auto_prefix = 0
'''

#c cpp
[[plugins]]
repo = 'uplus/vim-clang-rename'
on_ft = ['c', 'cpp', 'arduino']
hook_add = '''
  au myac FileType c,cpp nmap <buffer><silent>,lr <Plug>(clang_rename-current)
'''

## -----------------------------
## python
## -----------------------------

[[plugins]]
repo = 'tmhedberg/SimpylFold'
on_ft = 'python'
hook_add = '''
  let g:SimpylFold_docstring_preview = 0
  let g:SimpylFold_fold_docstring = 1
  let g:SimpylFold_fold_import = 0
'''

## -----------------------------
## git
## -----------------------------

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = ['Gina']
on_func = ['gina#']
hook_add = '''
  nnoremap <space>gi :Gina<space>
  nnoremap <space>g<space> :Gina<space>

  " diffモードでdorやdolのマッピングが生まれるので無効化
  let g:gina#command#patch#use_default_mappings = v:false

  " ハッシュを表示するオプションは無い
  " let g:gina#command#blame#formatter#format = '%su%=on %ti %ma%in'
  let g:gina#command#blame#formatter#timestamp_months = 0
  let g:gina#command#blame#formatter#timestamp_format1 = '%Y/%m/%d'
  let g:gina#command#blame#formatter#timestamp_format2 = '%Y/%m/%d'
'''
# autoload関数で設定するので遅延読み込みさせる(20ms)
hook_source = 'source ~/.vim/rc/gina.rc.vim'

[[plugins]]
# git add -p
repo = 'AndrewRadev/gapply.vim'
on_cmd = 'Gapply'
on_func = 'gapply#Start()'

[[plugins]]
repo = 'rhysd/committia.vim'
on_ft = 'gitcommit'
hook_add = '''
  let g:committia_open_only_vim_starting = 1
  let g:committia_hooks = {}
  function! g:committia_hooks.edit_open(info)
    " Scroll the diff window from insert mode
    imap <buffer><m-k> <Plug>(committia-scroll-diff-up-half)
    imap <buffer><m-j> <Plug>(committia-scroll-diff-down-half)
  endfunction
'''

# [[plugins]]
# repo = 'lambdalisue/vim-gista'
# on_cmd = ['Gista']
# on_func = 'gista#'
# hook_add = '''
#   let g:gista#client#default_username = 'uplus'
#   let g:gista#command#post#default_public = 0
#   let g:gista#command#post#allow_empty_description = 1
# '''
#
# [[plugins]]
# repo = 'mattn/gist-vim'
# depends = 'webapi-vim'
# on_cmd = 'Gist'
# hook_source = '''
#   let g:gist_clip_command = 'xclip -selection clipboard'
# '''

[[plugins]]
repo = 'f-person/git-blame.nvim'
on_cmd = ['GitBlameToggle', 'GitBlameCopySHA', 'GitBlameOpenCommitURL']
hook_add = '''
  let g:gitblame_enabled  = 0
  let g:gitblame_date_format = '%Y/%m/%d'
  " <author> <committer> <date> <committer-date> <summary> <sha>
  let g:gitblame_message_template = "\t<date> • <author> • <summary>"
  " let g:gitblame_highlight_group = "Comment"

  let g:gitblame_use_blame_commit_file_urls = v:true

  " EOLではなくこの列数からメッセージを出力する
  let g:gitblame_virtual_text_column = 80

  nnoremap ,gb <cmd>GitBlameToggle<cr>
  nnoremap ,gy <cmd>GitBlameCopySHA<cr>
  nnoremap ,go <cmd>GitBlameOpenCommitURL<cr>
'''

## -----------------------------
## web
## -----------------------------

[[plugins]]
repo = 'tyru/open-browser.vim'
on_cmd = [ 'OpenBrowser', 'OpenBrowserSearch', 'OpenBrowserSmartSearch' ]
on_map = [ '<Plug>(openbrowser-open)', '<Plug>(openbrowser-search)', '<Plug>(openbrowser-smart-search)', '<Plug>(openbrowser-wwwsearch)' ]
on_func = ['openbrowser#open', 'openbrowser#search', 'openbrowser#smart_search']
hook_add = '''
  nnoremap <expr><Plug>(openbrowser-wwwsearch) <SID>www_search('')
  nnoremap <expr><Plug>(openbrowser-smart-open) <SID>smart_open()

  nmap gss <Plug>(openbrowser-wwwsearch)
  xmap gsc <Plug>(openbrowser-smart-search)
  nmap gsc <Plug>(openbrowser-smart-open)

  function! s:smart_open() abort
    if &filetype ==# 'toml' && getline('.') =~# '^\s*#\?\s*repo' " && expand('%:p') =~# '/plugins/.*\.toml$'
      call my#dein#open_repo()
      return
    endif

    if &filetype ==# 'yaml' && getline('.') =~# '^\s*#\?\s*.*/.*:' && expand('%:p') =~# '.rubocop.*\.yml$'
      OpenCop
      return
    endif

    let l:iskeyword_save = &iskeyword
    setl iskeyword=@,@-@,-,_,:,;,.,#,%,/,48-57,?,=,&

    try
      let l:str = expand('<cword>')
      let l:str = substitute(l:str, '[,.]$', '', '')
      call openbrowser#smart_search(l:str)
    finally
      let &l:iskeyword = l:iskeyword_save
    endtry
  endfunction

  function! s:www_search(query) abort
    if a:query !=# ''
      let l:search_word = a:query
    else
      let l:search_word = input('Please input search word: ')
    endif

    if l:search_word !=# ''
      let l:search_word = substitute(l:search_word, "'", "''", 'g')
      call openbrowser#search(l:search_word)
    endif
  endfunction
'''

[[plugins]]
repo = 'tyru/open-browser-github.vim'
depends = 'open-browser.vim'
on_cmd = ['OpenGithubFile', 'OpenGithubIssue', 'OpenGithubPullReq' ]

## -----------------------------
## operator
## -----------------------------

[[plugins]] # se evaluate textobj as expression of lambda of ruby
repo = 'rhysd/vim-operator-evalruby'
depends = 'vim-operator-user'
on_map = '<Plug>(operator-evalruby)'

[[plugins]]
repo = 'rhysd/vim-clang-format'
on_ft = ['c', 'cpp', 'arduino']
hook_add = '''
  let g:clang_format#command = 'clang-format'
  let g:clang_format#detect_style_file = 1
'''

[[plugins]] # <space>j <space>k
repo = 'osyo-manga/vim-operator-jump_side'
depends = 'vim-operator-user'
on_map  = '<Plug>(operator-jump'

## -----------------------------
## misc
## -----------------------------

[[plugins]] # nvimから消されたLspのVimコマンドインターフェース
repo = 'ii14/lsp-command'
on_cmd = 'Lsp'
hook_add = '''
  let g:lsp_legacy_commands = v:true
'''

[[plugins]]
repo = 'tpope/vim-characterize'
on_map = '<Plug>(characterize)'
hook_add = '''
  nmap gaa <Plug>(characterize)
'''

[[plugins]]
repo = 'mbbill/undotree'
on_cmd = ['UndotreeToggle', 'UndotreeShow']
hook_add = '''
  nnoremap ,ug :UndotreeToggle<cr>

  let g:undotree_WindowLayout = 3
  " let g:undotree_CustomUndotreeCmd = 'vertical 32 new'
  let g:undotree_SplitWidth = 50 " float2nr(winwidth(0)*0.24)
  let g:undotree_DiffpanelHeight = 30
  let g:undotree_SetFocusWhenToggle = 1
  let g:undotree_ShortIndicators = 1

  function g:Undotree_CustomMap()
    nmap <buffer> k <plug>UndotreeNextState
    nmap <buffer> j <plug>UndotreePreviousState
    nmap <buffer> K <plug>UndotreeNextSavedState
    nmap <buffer> J <plug>UndotreePreviousSavedState

    " <plug>UndotreeHelp
    " <plug>UndotreeClose
    " <plug>UndotreeFocusTarget
    " <plug>UndotreeClearHistory
    " <plug>UndotreeTimestampToggle
    " <plug>UndotreeDiffToggle
    " <plug>UndotreeNextState
    " <plug>UndotreePreviousState
    " <plug>UndotreeNextSavedState
    " <plug>UndotreePreviousSavedState
    " <plug>UndotreeRedo
    " <plug>UndotreeUndo
    " <plug>UndotreeEnter
  endfunc
'''

[[plugins]]
repo = 'rcarriga/nvim-notify'
on_lua = 'notify'
hook_source = '''
lua <<EOF
  require("notify").setup({
    -- Animation style (see below for details)
    stages = "fade_in_slide_out",

    -- Function called when a new window is opened, use for changing win settings/config
    on_open = nil,

    -- Function called when a window is closed
    on_close = nil,

    -- Render function for notifications. See notify-render()
    render = "default",

    -- Default timeout for notifications
    timeout = 3000,

    -- Max number of columns for messages
    max_width = nil,
    -- Max number of lines for a message
    max_height = nil,

    -- For stages that change opacity this is treated as the highlight behind the window
    -- Set this to either a highlight group, an RGB hex value e.g. "#000000" or a function returning an RGB code for dynamic values
    background_colour = "Normal",

    -- Minimum width for notification windows
    minimum_width = 50,

    -- Icons for the different levels
    icons = {
      ERROR = "",
      WARN = "",
      INFO = "",
      DEBUG = "",
      TRACE = "✎",
    },
  })
EOF
'''

[[plugins]]
repo = 'rbtnn/vimconsole.vim'
on_cmd = ['VimConsoleOpen', 'VimConsoleToggle', 'VimConsoleLog']
on_map = '<Plug>(vimconsole_'
on_func = 'vimconsole#log'
hook_add = '''
  let g:vimconsole#auto_redraw = 1
  let g:vimconsole#height = 10
  let g:vimconsole#hooks = {}
  command! -nargs=1 ConsoleLog call vimconsole#log(<args>)
  command! Log VimConsoleOpen

  " function! g:vimconsole#hooks.on_logged(context)
  "   call vimconsole#winopen()
  " endfunction
'''

[[plugins]] # To convert {range} mutually HTML and Entity.
repo = 'inotom/str2htmlentity'
on_cmd = ['Str2HtmlEntity', 'Entity2HtmlString']

[[plugins]]
repo = 'tkhren/vim-fake'
on_cmd = ['FakeSubstitute']
on_func = 'fake#'

[[plugins]]
repo = 'uplus/vim-fakearray'
on_map = [['i', '<Plug>(fakearray)']]
on_func = ['fakearray#get', 'fakearray#prompt', 'fakearray#val']
hook_add = '''
  " <c-/>a
  imap a <Plug>(fakearray)
  imap <c-a> <Plug>(fakearray)
'''

[[plugins]] # Display unicode.
repo = 'osyo-manga/vim-hideout'
on_cmd = ['HideoutOn']

[[plugins]]
if = 'v:false' # c-y がコンフリクトするから一旦無効
repo = 'mattn/emmet-vim'
on_ft = ['html', 'xhtml', 'css']
hook_add = '''
  let g:user_emmet_mode = 'iv'
  let g:user_emmet_expandabbr_key = '<c-y><c-y>'
'''

[[plugins]]
repo = 'thinca/vim-scall'
on_func = ['Scall', 'scall#']
hook_add = '''
  let g:scall_function_name = 'Scall'
'''

[[plugins]]
repo = 'mattn/httpstatus-vim'
on_cmd = ['HttpStatus', 'CtrlPHttpStatus']

[[plugins]]
repo = 'tweekmonster/helpful.vim'
on_cmd = ['HelpfulVersion']
on_ft = ['vim', 'help']

# [[plugins]]
# repo = 'gelguy/wilder.nvim'
# on_map = ':'
# if = 'has("nvim")'
# hook_source = '''
# call wilder#enable_cmdline_enter()
# set wildcharm=<Tab>
#
# cnoremap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
# cnoremap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"
#
# " only / and ? are enabled by default
# call wilder#set_option('modes', ['/', '?', ':'])
#
# " When the cmdline is empty, provide suggestions based on the cmdline history
# call wilder#set_option('pipeline', [
#       \   wilder#branch(
#       \     [
#       \       wilder#check({_, x -> empty(x)}),
#       \       wilder#history(),
#       \     ],
#       \     wilder#cmdline_pipeline(),
#       \     wilder#search_pipeline(),
#       \   ),
#       \ ])
#
# if has('nvim')
#   " popupmenu completion
#   call wilder#set_option('renderer', wilder#popupmenu_renderer({
#         \ 'highlighter': wilder#basic_highlighter(),
#         \ }))
# endif
# '''
